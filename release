#!/usr/bin/env python
# Copyright (C) 2008, Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import fileinput
import optparse
import os
import re
import subprocess
import sys

upload_host = 'dev.laptop.org'
upload_root = '/var/www/sugar/sources'
base_dir = os.getcwd()

class Release(object):
    def __init__(self):
        self.name = None
        self.version = None

    def read_config(self):
        config = open(self.config_path).read()

        m = re.search(self.name_regexp, config)
        self.name = m.group(1)

        m = re.search(self.version_regexp, config)
        self.version = m.group(1)

    def next_version(self, current):
        splitted = current.split('.')
        new_minor = int(splitted[-1]) + 1
        splitted[-1] = str(new_minor)

        return '.'.join(splitted)

    def bump_version(self, version):
        config = open(self.config_path).read()

        m = re.search(self.version_regexp, config)
        if version is None:
            version = self.next_version(m.group(1))
        config = config[:m.start(1)] + version + config[m.end(1):]

        open(self.config_path, "w").write(config)

        self.version = version

    def undo_version(self):
        subprocess.check_call(['git', 'checkout', self.config_path])

    def tag(self):
        message = 'Release %s' % self.version

        subprocess.check_call(['git', 'commit', '-a', '-m' , '"%s"' % message])
        subprocess.check_call(['git', 'tag', 'v%s' % self.version])

    def push(self):
        subprocess.check_call(['git', 'push'])
        subprocess.check_call(['git', 'push', '--tags'])

    def build_tarball(self):
        ret = subprocess.call(self.tarball_command)
        return ret == 0

    def get_tarball_name(self):
        return '%s-%s.tar.bz2' % (self.name, self.version)

    def get_tarball_path(self):
        return os.path.join(base_dir, self.get_tarball_name())

    def upload(self):
        upload_path = os.path.join(upload_root, self.name)
        upload_dest = upload_host + ':' + upload_path

        subprocess.check_call(['ssh', upload_host, 'mkdir', '-p', upload_path])
        subprocess.check_call(['scp', self.get_tarball_path(), upload_dest])

class ActivityRelease(Release):
    def __init__(self):
        Release.__init__(self)

        setup_path = os.path.join(base_dir, 'setup.py')

        self.config_path = os.path.join(base_dir, 'activity', 'activity.info')
        self.name_regexp = 'name\s*=\s*(.*)'
        self.version_regexp = 'activity_version\s*=\s*(.*)'
        self.tarball_command = [setup_path, 'dist_source']

    def get_tarball_path(self):
        return os.path.join(base_dir, 'dist', self.get_tarball_name())

class AutomakeRelease(Release):
    def __init__(self):
        Release.__init__(self)

        self.config_path = os.path.join(base_dir, 'configure.ac')
        self.name_regexp = 'AC_INIT\(\[(.*?)\]'
        self.version_regexp = 'AC_INIT\(\[.*?\],\[(.*?)\]'
        self.tarball_command = ['make', 'distcheck']

def main():
    parser = optparse.OptionParser()
    parser.add_option('-v', '--version', dest='version',
                      help='Release version')
    (options, args) = parser.parse_args()

    if os.path.exists(os.path.join(base_dir, 'configure.ac')):
        release = AutomakeRelease()
    elif os.path.exists(os.path.join(base_dir, 'setup.py')):
        release = ActivityRelease()
    else:
        print 'Unknow module type.'

    release.read_config()

    print 'Bump version number...'
    release.bump_version(options.version)

    print 'Build source tarball...'
    if not release.build_tarball():
        print 'Failed to build source tarball.'
        release.undo_version()
        sys.exit(1)

    print 'Tag the release in git...'
    release.tag()

    print 'Push the changes to remote git...'
    release.push()

    print 'Upload the source tarball...'
    release.upload()

main()
